class Solution {
public:
    //[low,high)
    int searchRow(vector<vector<int> >&matrix,int low,int high,int target){

        if(low>=high)
            return -1;
//        int mid = (low+high)/2; 为了刷更少内存...
//        int length = matrix[0].size();
        int midRowLastValue = matrix[(low+high)/2][matrix[0].size()-1];
        int midRowFirstValue = matrix[(low+high)/2][0];
        if(target<=midRowLastValue and target>=midRowFirstValue){
            return (low+high)/2;
        }else if(target<midRowFirstValue){
            return searchRow(matrix,low,(low+high)/2,target);
        }else{
            return searchRow(matrix,(low+high)/2+1,high,target);
        }

    }
    //[low,high)
    int searchInRow(vector<vector<int> >&matrix,int rowIndex,int low,int high,int target){
        if(low>=high){
            //INT_32MIN FOR FALSE
            return INT32_MIN;
        }else{
//            vector<int>temp = matrix[rowIndex];
//            int mid = (low+high)/2;
            if(matrix[rowIndex][(low+high)/2] == target){
                return target;
            }else if(target<matrix[rowIndex][(low+high)/2]){
                return searchInRow(matrix,rowIndex,low,(low+high)/2,target);
            }else{
                return searchInRow(matrix,rowIndex,(low+high)/2+1,high,target);
            }
        }
    }
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row = searchRow(matrix,0,matrix.size(),target);
        if(row==-1){
            return false;
        }else{
            return searchInRow(matrix,row,0,matrix[0].size(),target)==target;
        }
    }
};

//runtime:8 ms
//memory:9.3 MB
